definitions:
  models.Comment:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      message:
        type: string
      photo:
        $ref: '#/definitions/models.Photo'
      photoId:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userId:
        type: integer
    type: object
  models.Photo:
    properties:
      caption:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      photoUrl:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userId:
        type: integer
    type: object
  models.SocialMedia:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      socialMediaUrl:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userId:
        type: integer
    type: object
  models.User:
    properties:
      age:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.UserLogin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.UserRegister:
    properties:
      age:
        type: string
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
host: localhost
info:
  contact:
    email: soberkoder@swagger.io
    name: API Support
  description: This is a sample service for managing books
  license:
    name: Apache 2.0
    url: http://www.apache.org/license/LICENSE-2.0.html
  title: MyGram API
  version: "1.0"
paths:
  /comments:
    get:
      consumes:
      - application/json
      description: Get details of all comment
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Get details
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Create the comment
      parameters:
      - description: create comment
        in: body
        name: models.Comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - ApiKeyAuth: []
      summary: Create the comment
      tags:
      - comments
  /comments/{commentId}:
    delete:
      consumes:
      - application/json
      description: Delete of comment find by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - ApiKeyAuth: []
      summary: Delete detail
      tags:
      - comments
    get:
      consumes:
      - application/json
      description: Get detail of comment find by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Get detail
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update the comment
      parameters:
      - description: update comment
        in: body
        name: models.Comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - ApiKeyAuth: []
      summary: Update the comment
      tags:
      - comments
  /photos:
    get:
      consumes:
      - application/json
      description: Get detail all of photos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      summary: Get detail
      tags:
      - photos
    post:
      consumes:
      - application/json
      description: Create the photo
      parameters:
      - description: create photo
        in: body
        name: models.Photo
        required: true
        schema:
          $ref: '#/definitions/models.Photo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - ApiKeyAuth: []
      summary: Create the photo
      tags:
      - photos
  /photos/{photoId}:
    delete:
      consumes:
      - application/json
      description: Delete of photo find by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - ApiKeyAuth: []
      summary: Delete photo
      tags:
      - photos
    get:
      consumes:
      - application/json
      description: Get detail of photo find by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      summary: Get detail
      tags:
      - photos
    put:
      consumes:
      - application/json
      description: Update the photo
      parameters:
      - description: update photo
        in: body
        name: models.Photo
        required: true
        schema:
          $ref: '#/definitions/models.Photo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - ApiKeyAuth: []
      summary: Update the photo
      tags:
      - photos
  /socialMedias:
    get:
      consumes:
      - application/json
      description: Get details of all social media
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      summary: Get details
      tags:
      - socialMedias
    post:
      consumes:
      - application/json
      description: Create the social media
      parameters:
      - description: create social media
        in: body
        name: models.SocialMedia
        required: true
        schema:
          $ref: '#/definitions/models.SocialMedia'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      security:
      - ApiKeyAuth: []
      summary: Create the social media
      tags:
      - socialMedias
  /socialMedias/{socialMediaId}:
    delete:
      consumes:
      - application/json
      description: Delete of social media find by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      security:
      - ApiKeyAuth: []
      summary: Delete social media
      tags:
      - socialMedias
    get:
      consumes:
      - application/json
      description: Get detail of social media find by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      summary: Get detail
      tags:
      - socialMedias
    put:
      consumes:
      - application/json
      description: Update the social media
      parameters:
      - description: update social media
        in: body
        name: models.SocialMedia
        required: true
        schema:
          $ref: '#/definitions/models.SocialMedia'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      security:
      - ApiKeyAuth: []
      summary: Update the social media
      tags:
      - socialMedias
  /users/login:
    post:
      consumes:
      - application/json
      description: Create the user
      parameters:
      - description: login user
        in: body
        name: models.UserLogin
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Create the user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Create the user
      parameters:
      - description: create user
        in: body
        name: models.UserRegister
        required: true
        schema:
          $ref: '#/definitions/models.UserRegister'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Create the user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
